# ============================================
# Gunicorn配置文件 - 慢查询分析系统
# ============================================
# 使用方法：gunicorn -c gunicorn.conf.py app:app

# ============================================
# 服务器绑定配置
# ============================================
# 绑定地址和端口
bind = "0.0.0.0:5172"

# ============================================
# 工作进程配置
# ============================================
# 工作进程数量 (建议: CPU核心数 × 2 + 1)
workers = 2

# 工作进程类型
worker_class = "sync"

# 每个工作进程的连接数
worker_connections = 1000

# ============================================
# 超时配置
# ============================================
# 请求超时时间 (秒)
timeout = 300

# 保持连接时间 (秒)
keepalive = 5

# ============================================
# 进程管理配置
# ============================================
# 每个工作进程处理的最大请求数 (防止内存泄露)
max_requests = 1000

# 最大请求数的随机偏移量
max_requests_jitter = 100

# 预加载应用代码 (提高性能)
preload_app = True

# ============================================
# 日志配置
# ============================================
# 访问日志文件路径
accesslog = "/var/log/gunicorn-access.log"

# 错误日志文件路径
errorlog = "/var/log/gunicorn-error.log"

# 日志级别 (debug, info, warning, error, critical)
loglevel = "info"

# 访问日志格式
access_log_format = '%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s" %(D)s'

# ============================================
# 进程标识配置
# ============================================
# 进程名称
proc_name = "slowquery-backend"

# PID文件路径 (可选)
pidfile = "/var/run/gunicorn-slowquery.pid"

# ============================================
# 安全配置 (可选)
# ============================================
# 运行用户 (取消注释并设置实际用户名)
# user = "www-data"

# 运行用户组 (取消注释并设置实际组名)
# group = "www-data"

# ============================================
# 其他配置
# ============================================
# 临时上传目录
tmp_upload_dir = None

# 是否启用守护进程模式 (通常由进程管理器处理)
daemon = False

# ============================================
# 性能调优配置
# ============================================
# 工作进程的内存限制 (字节)
# worker_memory_limit = 134217728  # 128MB

# 工作进程的CPU时间限制 (秒)
# worker_cpu_limit = 300

# ============================================
# SSL配置 (HTTPS)
# ============================================
# SSL密钥文件路径 (如果启用HTTPS)
# keyfile = "/path/to/private.key"

# SSL证书文件路径 (如果启用HTTPS)
# certfile = "/path/to/certificate.crt"

# ============================================
# 钩子函数 (高级配置)
# ============================================

def on_starting(server):
    """服务器启动时调用"""
    server.log.info("慢查询分析系统后端服务正在启动...")

def on_reload(server):
    """配置重载时调用"""
    server.log.info("配置已重载")

def when_ready(server):
    """服务器准备就绪时调用"""
    server.log.info("慢查询分析系统后端服务已就绪，监听 %s", server.address)

def worker_int(worker):
    """工作进程收到中断信号时调用"""
    worker.log.info("工作进程 %s 收到中断信号", worker.pid)

def pre_fork(server, worker):
    """工作进程fork前调用"""
    server.log.info("工作进程 %s 即将启动", worker.pid)

def post_fork(server, worker):
    """工作进程fork后调用"""
    server.log.info("工作进程 %s 已启动", worker.pid)

def pre_exec(server):
    """执行新程序前调用"""
    server.log.info("重新执行程序")

def on_exit(server):
    """服务器退出时调用"""
    server.log.info("慢查询分析系统后端服务已停止")

# ============================================
# 环境变量 (可选)
# ============================================
# 可以设置环境变量
# raw_env = [
#     'DATABASE_URL=mysql://user:pass@localhost/dbname',
#     'SECRET_KEY=your-secret-key',
# ]

# ============================================
# 配置验证
# ============================================
def post_worker_init(worker):
    """工作进程初始化后验证配置"""
    worker.log.info("工作进程 %s 配置验证完成", worker.pid)
